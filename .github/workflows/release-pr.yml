name: Release PR

on:
  workflow_dispatch:
    inputs:
      version_part:
        description: 'Version part to bump (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release
          
      - name: Calculate next version
        id: version
        run: |
          pip install python-semantic-release
          CURRENT_VERSION=$(python -m semantic_release version --print)
          echo "Current version: $CURRENT_VERSION"
          
          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Calculate new version based on input
          if [ "${{ inputs.version_part }}" == "major" ]; then
            NEW_VERSION=$((MAJOR + 1)).0.0
          elif [ "${{ inputs.version_part }}" == "minor" ]; then
            NEW_VERSION=$MAJOR.$((MINOR + 1)).0
          else
            NEW_VERSION=$MAJOR.$MINOR.$((PATCH + 1))
          fi
          
          echo "NEXT_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Next version will be: $NEW_VERSION"
      
      - name: Create release branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release/v${{ env.NEXT_VERSION }}
          
      - name: Update version
        run: |
          # Update version in __init__.py
          VERSION_FILE="medium_converter/__init__.py"
          sed -i 's/__version__ = ".*"/__version__ = "${{ env.NEXT_VERSION }}"/' $VERSION_FILE
          
      - name: Generate changelog
        run: |
          pip install python-semantic-release
          python -m semantic_release changelog --unreleased > CHANGELOG_LATEST.md
          echo "Generated changelog for v${{ env.NEXT_VERSION }}"
          
      - name: Commit changes
        run: |
          git add medium_converter/__init__.py
          git add CHANGELOG_LATEST.md || true
          git commit -m "chore(release): prepare v${{ env.NEXT_VERSION }}"
          
      - name: Push branch
        run: |
          git push --set-upstream origin release/v${{ env.NEXT_VERSION }}
          
      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release/v${{ env.NEXT_VERSION }}
          base: main
          title: "chore(release): prepare v${{ env.NEXT_VERSION }}"
          body: |
            ## Release v${{ env.NEXT_VERSION }}
            
            This PR prepares the release of version ${{ env.NEXT_VERSION }}.
            
            Changes included in this release:
            
            ```
            $(cat CHANGELOG_LATEST.md)
            ```
          
      - name: PR Details
        run: |
          echo "Pull Request created: ${{ steps.create-pr.outputs.pull-request-url }}"